{"version":3,"sources":["components/Filter/Filter.module.css","redux/app/app-phonebook-actions.js","redux/app/app-phonebook-selector.js","components/Forms/Form.js","components/Todolist/Todolist.js","components/Filter/Filter.js","App.js","redux/app/app-phonebook-reducer.js","redux/store.js","index.js","components/Forms/Form.module.css","components/Todolist/Todolist.module.css"],"names":["module","exports","addContacts","createAction","name","number","association","payload","id","shortid","generate","deleteContacts","changeFilter","getContacts","state","contact","getFilter","filter","getVisibleContacts","contacts","optimizedFilter","toLowerCase","includes","Form","useSelector","dispatch","useDispatch","useState","setName","setNumber","setAssociation","onSubmit","e","preventDefault","repeatName","reduce","acc","repeatNumber","alert","className","s","m","title","form__name","onChange","currentTarget","value","type","pattern","required","form__number","radio__btn","checked","Todolist","contactsOll","contacts__list","map","item","name__contact","btn","onClick","onDeleteContact","Filter","label","input","event","target","App","contactList","createReducer","phonebookReducer","combineReducers","phonebookPersistConfig","key","storage","blacklist","persisteReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.3c0b0700.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__MWq11\",\"input\":\"Filter_input__1gi6F\"};","import { createAction } from '@reduxjs/toolkit';\n// import { v4 as uuid } from 'uuid';\n// const contactId = uuid();\nimport shortid from 'shortid';\n\nexport const addContacts = createAction(\n  'contacts/add',\n  (name, number, association) => ({\n    payload: {\n      id: shortid.generate(),\n      name,\n      number,\n      association,\n    },\n  }),\n);\nexport const deleteContacts = createAction('contacts/delete');\nexport const changeFilter = createAction('filter/value');\n\n// export const addContacts = contactLst => ({\n//   type: 'contacts/add',\n//   payload: contactLst,\n// });\n\n// export const deleteContacts = id => ({\n//   type: 'contacts/delete',\n//   payload: { id },\n// });\n\n// export const changeFilter = value => ({\n//   type: 'filter/value',\n//   payload: value,\n// });\n","export const getContacts = state => state.contact;\r\nexport const getFilter = state => state.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const optimizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(optimizedFilter),\r\n  );\r\n};\r\n\r\n//   const { filter } = state;\r\n//   const optimizedFilter = filter.toLowerCase();\r\n\r\n//   const vizibleCOntacts = state.contact.filter(contact =>\r\n//     contact.name.toLowerCase().includes(optimizedFilter),\r\n//   );\r\n\r\n//   return { contactsOll: vizibleCOntacts };\r\n","// import { Component } from 'react';\n// import { connect } from 'react-redux';\nimport { useState } from 'react';\nimport s from './Form.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContacts } from '../../redux/app/app-phonebook-actions';\nimport { getContacts } from '../../redux/app/app-phonebook-selector';\n\nfunction Form() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = (name, number, association) =>\n    dispatch(addContacts(name, number, association));\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [association, setAssociation] = useState('Other');\n\n  // const contactCheck = () => {\n\n  //     const repeatName = contacts.reduce(\n  //     (acc, contact) => [...acc, contact.name],\n  //     [],\n  //   );\n  //   const repeatNumber = contacts.reduce(\n  //     (acc, contact) => [...acc, contact.number],\n  //     [],\n  //   );\n\n  //   if (repeatName.includes(name) || repeatNumber.includes(number)) {\n\n  //    alert(`${name} ${number} is already `);\n  //     return;\n  //   }\n\n  //   if (name === '' || number === '') {\n  //     alert(`Enter data`);\n  //     return;\n  //   }\n\n  // };\n\n  const handleSabmit = e => {\n    e.preventDefault();\n    const repeatName = contacts.reduce(\n      (acc, contact) => [...acc, contact.name],\n      [],\n    );\n    const repeatNumber = contacts.reduce(\n      (acc, contact) => [...acc, contact.number],\n      [],\n    );\n\n    if (repeatName.includes(name) || repeatNumber.includes(number)) {\n      alert(`${name} ${number} is already `);\n      return;\n    }\n\n    if (name === '' || number === '') {\n      alert(`Enter data`);\n      return;\n    }\n\n    onSubmit(name, number, association);\n    setName('');\n    setNumber('');\n    setAssociation('Other');\n    //Дизпачим продукет в редакс\n  };\n\n  return (\n    <form onSubmit={handleSabmit} className={s.m}>\n      <h2 className={s.title}>Phonebook</h2>\n      <label className={s.form__name}>\n        Name\n        <input\n          // id={this.contactIdName}\n          onChange={e => setName(e.currentTarget.value)}\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.form__number}>\n        Number\n        <input\n          // id={this.contactIdNumber}\n          onChange={e => setNumber(e.currentTarget.value)}\n          type=\"tel\"\n          value={number}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <div className={s.radio__btn}>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Work\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Work'}\n          />\n          Work\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Family\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Family'}\n          />\n          Family\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Friends\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Friends'}\n          />\n          Friends\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Other\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Other'}\n          />\n          Other\n        </label>\n      </div>\n      <button type=\"submit\">Add contacts</button>\n    </form>\n  );\n}\n\nexport default Form;\n\n// class Form extends Component {\n//   state = {\n//     // contacts: [],\n//     id: '',\n//     name: '',\n//     number: '',\n//     association: 'Other',\n//   };\n\n//   contactIdName = uuid();\n//   contactIdNumber = uuid();\n\n//   handleChange = e => {\n//     console.log(e.currentTarget.value);\n//     // const contactId = uuid();\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//     // this.setState({ id: contactId });\n//   };\n\n//   handleSabmit = e => {\n//     e.preventDefault();\n//     const contactId = uuid();\n//     const { name, number, association } = this.state;\n//     const contactItem = {\n//       id: contactId,\n//       name,\n//       number,\n//       association,\n//     };\n//     this.setState({ contactItem }); //для себя пишем новий обект продукта\n\n//     this.props.onAdd(contactItem); //Дизпачим продукет в редакс\n//     this.resetForm();\n//   };\n\n//   resetForm = () => {\n//     this.setState({ id: '', name: '', number: '', association: 'Other' });\n//   };\n\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSabmit} className={s.m}>\n//         <h2 className={s.title}>Phonebook</h2>\n//         <label htmlFor={this.contactIdName} className={s.form__name}>\n//           Name\n//           <input\n//             id={this.contactIdName}\n//             onChange={this.handleChange}\n//             type=\"text\"\n//             value={this.state.name}\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//           />\n//         </label>\n//         <label htmlFor={this.contactIdNumber} className={s.form__number}>\n//           Number\n//           <input\n//             id={this.contactIdNumber}\n//             onChange={this.handleChange}\n//             type=\"tel\"\n//             value={this.state.number}\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//           />\n//         </label>\n\n//         <div className={s.radio__btn}>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Work\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Work'}\n//             />\n//             Work\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Family\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Family'}\n//             />\n//             Family\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Friends\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Friends'}\n//             />\n//             Friends\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Other\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Other'}\n//             />\n//             Other\n//           </label>\n//         </div>\n//         <button type=\"submit\">Add contacts</button>\n//       </form>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = dispatch => {\n//   // console.log(\"dispatch\", dispatch);\n//   return {\n//     onAdd: contactR => dispatch(addContacts(contactR)),\n//   };\n// };\n// export default connect(null, mapDispatchToProps)(Form);\n","// import PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';\r\nimport s from './Todolist.module.css';\r\nimport { deleteContacts } from '../../redux/app/app-phonebook-actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getVisibleContacts } from '../../redux/app/app-phonebook-selector';\r\n\r\nfunction Todolist() {\r\n  const contactsOll = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const onDeleteContact = id => dispatch(deleteContacts(id));\r\n\r\n  return (\r\n    <ul className={s.contacts__list}>\r\n      {contactsOll.map(({ id, name, number, association }) => {\r\n        return (\r\n          <li key={id} className={s.item}>\r\n            {' '}\r\n            <p className={s.name__contact}>\r\n              Association: {association} | <span> name: {name} | </span>\r\n              <span>number: {number} |</span>\r\n            </p>\r\n            <button\r\n              className={s.btn}\r\n              type=\"button\"\r\n              onClick={() => onDeleteContact(id)}\r\n            >\r\n              {' '}\r\n              DELETE contact\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\nexport default Todolist;\r\n\r\n// Todolist.propTypes = {\r\n//   contacts: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       id: PropTypes.string.isRequired,\r\n//       name: PropTypes.string.isRequired,\r\n//       number: PropTypes.string.isRequired,\r\n//     }),\r\n//   ),\r\n//   onDeleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapStateToProps = state => {\r\n//   const { filter } = state;\r\n//   const optimizedFilter = filter.toLowerCase();\r\n//   const vizibleCOntacts = state.contact.filter(contact =>\r\n//     contact.name.toLowerCase().includes(optimizedFilter),\r\n//   );\r\n\r\n//   return { contactsOll: vizibleCOntacts };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onDeleteContact: id => dispatch(deleteContacts(id)),\r\n//   };\r\n// };\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Todolist);\r\n","// import { connect } from 'react-redux';\r\nimport s from './Filter.module.css';\r\n// import PropTypes from 'prop-types';\r\nimport { changeFilter } from '../../redux/app/app-phonebook-actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getFilter } from '../../redux/app/app-phonebook-selector';\r\nfunction Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(getFilter);\r\n  const onChange = event => dispatch(changeFilter(event.target.value));\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n\r\n// Filter.propTypes = {\r\n//   value: PropTypes.string,\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\n// const mapStateToProps = state => ({\r\n//   value: state.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: event => dispatch(changeFilter(event.currentTarget.value)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import './App.css';\r\nimport Form from './components/Forms/Form';\r\nimport TodoList from './components/Todolist/Todolist';\r\nimport Filter from './components/Filter/Filter';\r\n// import { Component } from 'react';\r\n// import { useSelector } from 'react-redux';\r\n// import { getVisibleContacts } from './redux/app/app-phonebook-selector';\r\n// import { connect } from 'react-redux';\r\nexport default function App() {\r\n  // const contacts = useSelector(getVisibleContacts);\r\n  return (\r\n    <div className=\"App\">\r\n      <Form />\r\n      <Filter />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\n// class App extends Component {\r\n//   state = {\r\n//     contactsOll: [],\r\n//     filter: '',\r\n//   };\r\n\r\n//   render() {\r\n//     const { contactsOll } = this.state;\r\n//     // const visibleContacts = this.getVisibleContacts();\r\n//     console.log('contactsOll', contactsOll);\r\n\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <Form />\r\n//         <Filter />\r\n//         <TodoList />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = state => {\r\n\r\n//   return {\r\n//     contactsOll: state.contact,\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps, null)(App);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import { addContacts, deleteContacts } from './app-phonebook-actions';\r\nconst initState = [\r\n  {\r\n    id: 'id-1',\r\n    name: 'Rosie Simpson',\r\n    number: '459-12-56',\r\n    association: 'Other',\r\n  },\r\n  {\r\n    id: 'id-2',\r\n    name: 'Hermione Kline',\r\n    number: '443-89-12',\r\n    association: 'Other',\r\n  },\r\n  {\r\n    id: 'id-3',\r\n    name: 'Eden Clements',\r\n    number: '645-17-79',\r\n    association: 'Other',\r\n  },\r\n  {\r\n    id: 'id-4',\r\n    name: 'Annie Copeland',\r\n    number: '227-91-26',\r\n    association: 'Other',\r\n  },\r\n];\r\n\r\nconst contactList = createReducer(initState, {\r\n  'contacts/add': (state, { payload }) => [...state, payload],\r\n  'contacts/delete': (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  'filter/value': (state, { payload }) => payload,\r\n});\r\n\r\nexport const phonebookReducer = combineReducers({\r\n  contact: contactList,\r\n  filter,\r\n});\r\n\r\n// const contactList = (state = initState, { type, payload }) => {\r\n//   // console.log('action.payload', action.payload);\r\n//   // console.log('state', state);\r\n//   switch (type) {\r\n//     case 'contacts/add':\r\n//       return [...state, payload];\r\n//     case 'contacts/delete':\r\n//       return state.filter(contact => contact.id !== payload.id);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'filter/value':\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","// import { createStore, applyMiddleware } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// export const store = createStore(\r\n//   phonebookReducer,\r\n//   composeWithDevTools(applyMiddleware()),\r\n// );\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { phonebookReducer } from './app/app-phonebook-reducer';\r\n\r\nconst phonebookPersistConfig = {\r\n  key: 'contact',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\nconst persisteReducer = persistReducer(\r\n  phonebookPersistConfig,\r\n  phonebookReducer,\r\n);\r\nexport const store = configureStore({\r\n  reducer: persisteReducer,\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n});\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from './redux/store';\r\n// import { store} from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </PersistGate>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <Provider store={store}>\r\n//       <App />\r\n//     </Provider>\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root'),\r\n// );\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"radio__btn\":\"Form_radio__btn__mnX69\",\"title\":\"Form_title__2HjXb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts__list\":\"Todolist_contacts__list__2PhS2\",\"item\":\"Todolist_item__3YgJU\"};"],"sourceRoot":""}