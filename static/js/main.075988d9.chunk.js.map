{"version":3,"sources":["components/Filter/Filter.module.css","redux/app/app-phonebook-actions.js","redux/app/app-phonebook-selector.js","components/Forms/Form.js","components/Todolist/Todolist.js","components/Filter/Filter.js","App.js","redux/app/app-phonebook-reducer.js","redux/store.js","index.js","components/Forms/Form.module.css","components/Todolist/Todolist.module.css"],"names":["module","exports","contactId","uuid","addContacts","createAction","name","number","association","payload","id","deleteContacts","changeFilter","getContacts","state","contact","getFilter","filter","getVisibleContacts","contacts","optimizedFilter","toLowerCase","includes","Form","useSelector","dispatch","useDispatch","useState","setName","setNumber","setAssociation","onSubmit","e","preventDefault","reduce","acc","alert","className","s","m","title","form__name","onChange","currentTarget","value","type","pattern","required","form__number","radio__btn","checked","Todolist","contactsOll","contacts__list","map","item","name__contact","btn","onClick","onDeleteContact","Filter","label","input","event","target","App","contactList","createReducer","phonebookReducer","combineReducers","phonebookPersistConfig","key","storage","blacklist","persisteReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.075988d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1w6Dh\",\"input\":\"Filter_input__2l4wY\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuid } from 'uuid';\nconst contactId = uuid();\n\nexport const addContacts = createAction(\n  'contacts/add',\n  (name, number, association) => ({\n    payload: {\n      id: contactId,\n      name,\n      number,\n      association,\n    },\n  }),\n);\nexport const deleteContacts = createAction('contacts/delete');\nexport const changeFilter = createAction('filter/value');\n\n// export const addContacts = contactLst => ({\n//   type: 'contacts/add',\n//   payload: contactLst,\n// });\n\n// export const deleteContacts = id => ({\n//   type: 'contacts/delete',\n//   payload: { id },\n// });\n\n// export const changeFilter = value => ({\n//   type: 'filter/value',\n//   payload: value,\n// });\n","export const getContacts = state => state.contact;\nexport const getFilter = state => state.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const optimizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(optimizedFilter),\n  );\n};\n\n//   const { filter } = state;\n//   const optimizedFilter = filter.toLowerCase();\n\n//   const vizibleCOntacts = state.contact.filter(contact =>\n//     contact.name.toLowerCase().includes(optimizedFilter),\n//   );\n\n//   return { contactsOll: vizibleCOntacts };\n","// import { Component } from 'react';\n// import { connect } from 'react-redux';\nimport { useState } from 'react';\nimport s from './Form.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContacts } from '../../redux/app/app-phonebook-actions';\nimport { getContacts } from '../../redux/app/app-phonebook-selector';\n\nfunction Form() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = (name, number, association) =>\n    dispatch(addContacts(name, number, association));\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [association, setAssociation] = useState('Other');\n\n  const contactCheck = () => {\n    const repeatName = contacts.reduce(\n      (acc, contact) => [...acc, contact.name],\n      [],\n    );\n    // const repeatNumber = contacts.reduce(\n    //   (acc, contact) => [...acc, contact.number],\n    //   [],\n    // );\n\n    // if (repeatName.includes(name) || repeatNumber.includes(number)) {\n    //   alert(`${name}${number} is already `);\n    // }\n\n    if (repeatName.includes(name)) {\n      alert(`${name}${number} is already `);\n    }\n\n    if (name === '' || number === '') {\n      alert(`Enter data`);\n    }\n  };\n\n  const handleSabmit = e => {\n    e.preventDefault();\n\n    setName('');\n    setNumber('');\n    setAssociation('Other');\n\n    if (contactCheck()) {\n      return;\n    }\n    onSubmit(name, number, association); //Дизпачим продукет в редакс\n  };\n\n  // const resetForm = () => {\n  //   setName('');\n  //   setNumber('');\n  //   setAssociation('Other');\n  // };\n\n  return (\n    <form onSubmit={handleSabmit} className={s.m}>\n      <h2 className={s.title}>Phonebook</h2>\n      <label className={s.form__name}>\n        Name\n        <input\n          // id={this.contactIdName}\n          onChange={e => setName(e.currentTarget.value)}\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.form__number}>\n        Number\n        <input\n          // id={this.contactIdNumber}\n          onChange={e => setNumber(e.currentTarget.value)}\n          type=\"tel\"\n          value={number}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <div className={s.radio__btn}>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Work\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Work'}\n          />\n          Work\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Family\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Family'}\n          />\n          Family\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Friends\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Friends'}\n          />\n          Friends\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Other\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Other'}\n          />\n          Other\n        </label>\n      </div>\n      <button type=\"submit\">Add contacts</button>\n    </form>\n  );\n}\n\nexport default Form;\n\n// class Form extends Component {\n//   state = {\n//     // contacts: [],\n//     id: '',\n//     name: '',\n//     number: '',\n//     association: 'Other',\n//   };\n\n//   contactIdName = uuid();\n//   contactIdNumber = uuid();\n\n//   handleChange = e => {\n//     console.log(e.currentTarget.value);\n//     // const contactId = uuid();\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//     // this.setState({ id: contactId });\n//   };\n\n//   handleSabmit = e => {\n//     e.preventDefault();\n//     const contactId = uuid();\n//     const { name, number, association } = this.state;\n//     const contactItem = {\n//       id: contactId,\n//       name,\n//       number,\n//       association,\n//     };\n//     this.setState({ contactItem }); //для себя пишем новий обект продукта\n\n//     this.props.onAdd(contactItem); //Дизпачим продукет в редакс\n//     this.resetForm();\n//   };\n\n//   resetForm = () => {\n//     this.setState({ id: '', name: '', number: '', association: 'Other' });\n//   };\n\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSabmit} className={s.m}>\n//         <h2 className={s.title}>Phonebook</h2>\n//         <label htmlFor={this.contactIdName} className={s.form__name}>\n//           Name\n//           <input\n//             id={this.contactIdName}\n//             onChange={this.handleChange}\n//             type=\"text\"\n//             value={this.state.name}\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//           />\n//         </label>\n//         <label htmlFor={this.contactIdNumber} className={s.form__number}>\n//           Number\n//           <input\n//             id={this.contactIdNumber}\n//             onChange={this.handleChange}\n//             type=\"tel\"\n//             value={this.state.number}\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//           />\n//         </label>\n\n//         <div className={s.radio__btn}>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Work\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Work'}\n//             />\n//             Work\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Family\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Family'}\n//             />\n//             Family\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Friends\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Friends'}\n//             />\n//             Friends\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Other\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Other'}\n//             />\n//             Other\n//           </label>\n//         </div>\n//         <button type=\"submit\">Add contacts</button>\n//       </form>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = dispatch => {\n//   // console.log(\"dispatch\", dispatch);\n//   return {\n//     onAdd: contactR => dispatch(addContacts(contactR)),\n//   };\n// };\n// export default connect(null, mapDispatchToProps)(Form);\n","// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport s from './Todolist.module.css';\nimport { deleteContacts } from '../../redux/app/app-phonebook-actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/app/app-phonebook-selector';\n\nfunction Todolist() {\n  const contactsOll = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(deleteContacts(id));\n\n  return (\n    <ul className={s.contacts__list}>\n      {contactsOll.map(({ id, name, number, association }) => {\n        return (\n          <li key={id} className={s.item}>\n            {' '}\n            <p className={s.name__contact}>\n              Association: {association} | <span> name: {name} | </span>\n              <span>number: {number} |</span>\n            </p>\n            <button\n              className={s.btn}\n              type=\"button\"\n              onClick={() => onDeleteContact(id)}\n            >\n              {' '}\n              DELETE contact\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\nexport default Todolist;\n\n// Todolist.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     }),\n//   ),\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => {\n//   const { filter } = state;\n//   const optimizedFilter = filter.toLowerCase();\n//   const vizibleCOntacts = state.contact.filter(contact =>\n//     contact.name.toLowerCase().includes(optimizedFilter),\n//   );\n\n//   return { contactsOll: vizibleCOntacts };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onDeleteContact: id => dispatch(deleteContacts(id)),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Todolist);\n","// import { connect } from 'react-redux';\nimport s from './Filter.module.css';\n// import PropTypes from 'prop-types';\nimport { changeFilter } from '../../redux/app/app-phonebook-actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/app/app-phonebook-selector';\nfunction Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilter);\n  const onChange = event => dispatch(changeFilter(event.target.value));\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n\n// Filter.propTypes = {\n//   value: PropTypes.string,\n//   onChange: PropTypes.func.isRequired,\n// };\n// const mapStateToProps = state => ({\n//   value: state.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: event => dispatch(changeFilter(event.currentTarget.value)),\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import './App.css';\nimport Form from './components/Forms/Form';\nimport TodoList from './components/Todolist/Todolist';\nimport Filter from './components/Filter/Filter';\n// import { Component } from 'react';\n// import { useSelector } from 'react-redux';\n// import { getVisibleContacts } from './redux/app/app-phonebook-selector';\n// import { connect } from 'react-redux';\nexport default function App() {\n  // const contacts = useSelector(getVisibleContacts);\n  return (\n    <div className=\"App\">\n      <Form />\n      <Filter />\n      <TodoList />\n    </div>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contactsOll: [],\n//     filter: '',\n//   };\n\n//   render() {\n//     const { contactsOll } = this.state;\n//     // const visibleContacts = this.getVisibleContacts();\n//     console.log('contactsOll', contactsOll);\n\n//     return (\n//       <div className=\"App\">\n//         <Form />\n//         <Filter />\n//         <TodoList />\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => {\n\n//   return {\n//     contactsOll: state.contact,\n//   };\n// };\n\n// export default connect(mapStateToProps, null)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n// import { addContacts, deleteContacts } from './app-phonebook-actions';\nconst initState = [\n  {\n    id: 'id-1',\n    name: 'Rosie Simpson',\n    number: '459-12-56',\n    association: 'Other',\n  },\n  {\n    id: 'id-2',\n    name: 'Hermione Kline',\n    number: '443-89-12',\n    association: 'Other',\n  },\n  {\n    id: 'id-3',\n    name: 'Eden Clements',\n    number: '645-17-79',\n    association: 'Other',\n  },\n  {\n    id: 'id-4',\n    name: 'Annie Copeland',\n    number: '227-91-26',\n    association: 'Other',\n  },\n];\n\nconst contactList = createReducer(initState, {\n  'contacts/add': (state, { payload }) => [...state, payload],\n  'contacts/delete': (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  'filter/value': (state, { payload }) => payload,\n});\n\nexport const phonebookReducer = combineReducers({\n  contact: contactList,\n  filter,\n});\n\n// const contactList = (state = initState, { type, payload }) => {\n//   // console.log('action.payload', action.payload);\n//   // console.log('state', state);\n//   switch (type) {\n//     case 'contacts/add':\n//       return [...state, payload];\n//     case 'contacts/delete':\n//       return state.filter(contact => contact.id !== payload.id);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case 'filter/value':\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n","// import { createStore, applyMiddleware } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// export const store = createStore(\n//   phonebookReducer,\n//   composeWithDevTools(applyMiddleware()),\n// );\nimport { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { phonebookReducer } from './app/app-phonebook-reducer';\n\nconst phonebookPersistConfig = {\n  key: 'contact',\n  storage,\n  blacklist: ['filter'],\n};\nconst persisteReducer = persistReducer(\n  phonebookPersistConfig,\n  phonebookReducer,\n);\nexport const store = configureStore({\n  reducer: persisteReducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n});\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n// import { store} from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate loading={null} persistor={persistor}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Provider store={store}>\n//       <App />\n//     </Provider>\n//   </React.StrictMode>,\n//   document.getElementById('root'),\n// );\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"radio__btn\":\"Form_radio__btn__3dnrZ\",\"title\":\"Form_title__1rj_a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts__list\":\"Todolist_contacts__list__1k81c\",\"item\":\"Todolist_item__36HEU\"};"],"sourceRoot":""}